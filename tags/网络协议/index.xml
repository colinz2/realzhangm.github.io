<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>网络协议 on zhangm blog</title><link>https://realzhangm.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link><description>Recent content in 网络协议 on zhangm blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2018–2022, zhangm; all rights reserved.</copyright><lastBuildDate>Sun, 27 Mar 2022 20:10:23 +0800</lastBuildDate><atom:link href="https://realzhangm.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>Websocket 协议分析</title><link>https://realzhangm.github.io/post/websocket%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</link><pubDate>Sun, 27 Mar 2022 20:10:23 +0800</pubDate><guid>https://realzhangm.github.io/post/websocket%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</guid><description>简述 Websocket 协议建立 Websocket 协议的建立是客户端与服务端通过 HTTP 的 Update 机制完成的。即将当前的 HTTP 协议升级为 websockt 协议，这样一来，websockt 可以复用 HTTP 的连接。
总结如下：
1. 协议握手，HTTP update 机制 2. 协议建立，可以通过 websocket 双向数据传输了 握手流程 客户端请求协议升级 服务端响应升级状态 具的报文如下：
The handshake from the client looks as follows: GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version: 13 The handshake from the server looks as follows: HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= Sec-WebSocket-Protocol: chat 其中客户端报文携带的 header 字段: Sec-WebSocket-Key ：必传， 由客户端随机生成的 16 字节值, 然后做 base64 编码, 客户端需要保证该值是足够随机, 不可被预测的</description></item></channel></rss>